<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Quine.Graph Namespace</title><meta name="Title" content="Quine.Graph" /><meta name="Help.Id" content="N:Quine.Graph" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Quine.Graph" /><meta name="guid" content="adaac905-5a5c-253d-9a23-20c5f79a4866" /><meta name="Description" content="summaryN:Quine." /><meta name="tocFile" content="../toc/Root.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">Quine libraries user's guide</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Quine.<wbr />Graph Namespace</h1><div class="summary"><p class="missing">[Missing &lt;summary&gt; documentation for "N:Quine.Graph"]</p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Classes</h2><div id="IDACASection"><table id="classList" class="table is-hoverable"><tr><td><a href="6b141bee-8a1f-f79d-012d-bd163af9b855.htm">ChannelClosedException</a></td><td>
            Used internally to signal that the channel is 1) empty and 2) in closed state, i.e.,
            that no more messages will be produced.
            </td></tr><tr><td><a href="799d0f97-c115-e1ca-c364-523af5b331e7.htm">DemultiplexorNode<span id="LST827382C_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TPayload<span id="LST827382C_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td> </td></tr><tr><td><a href="cb066f97-449f-bfc3-4d8a-232fc57afd2d.htm">DrainNode<span id="LST827382C_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TState<span id="LST827382C_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Terminal node for a graph.  Needed because all output ports must be connected to at least one input port.
            </td></tr><tr><td><a href="e75aef7f-df43-8a7d-ad51-3c0f4bb0b705.htm">GraphSchemaHook</a></td><td>
            Provides a way to access the state defined by schema classes.
            </td></tr><tr><td><a href="7c57996a-224a-c5c9-0a23-09f9fc92afae.htm">GraphSchemaHook<span id="LST827382C_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST827382C_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Generic version of <a href="e75aef7f-df43-8a7d-ad51-3c0f4bb0b705.htm">GraphSchemaHook</a>.
            </td></tr><tr><td><a href="22e149aa-a392-da1b-236b-dd265e0f407e.htm">GraphShell</a></td><td>
            Container and controller for nodes.
            </td></tr><tr><td><a href="16ddc342-9674-0c85-02a6-7f891d3ecd81.htm">InputPort<span id="LST827382C_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST827382C_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Type-erased implementation of input port; <a href="16ddc342-9674-0c85-02a6-7f891d3ecd81.htm">InputPort<span id="LST827382C_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST827382C_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> for a strongly-typed class.
            </td></tr><tr><td><a href="6e532299-400b-e3d0-1fcd-d6821838f338.htm">InteractiveQueryEventData</a></td><td>
            Event data for an interactive query event.  <a href="c161bd85-c979-0add-5a86-8fb8431054ed.htm">Query</a> contains the query object which must be completed
            with one of <a href="f80942f8-89aa-7488-208c-f55cc381ab9b.htm">SetResult(Object)</a>, <a href="1c14f4f7-e761-8751-5ac2-75178e4acb1a.htm">SetError(Exception)</a> or <a href="c1731217-dda2-4062-7ae2-a7bd8623c0b5.htm">Cancel<span id="LST827382C_10" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> methods.
            </td></tr><tr><td><a href="fb6549be-c18c-c8f6-8764-1ddbbaf89610.htm">ItemProcessingEventData</a></td><td>
            Event data common for begin/progress/end processing events.
            This is a stateful class where it is intended that every node has a single instance of a subclass implementing
            <a href="3215c1b5-11b4-89c6-fcee-9ad3e4855c68.htm">GraphMessageTotalSize</a> in a suitable way.
            Implementation note: This data cannot be part of <span class="code">GraphMessage</span> because a single message can be queued at
            and processed by multiple nodes.
            </td></tr><tr><td><a href="feb4e4f1-2366-4ba8-1daa-7ff0715890c8.htm">NodeConcurrencyLimiter</a></td><td><p>
            Limits the number of concurrently running nodes of the same type.
            Various kinds of limits (per-graph, per-process, etc.) can be achieved by considering the scope and lifetime of the DI
            registrations.
            </p><p>
            This type is not for public consumption, but it must be registered with DI.
            </p></td></tr><tr><td><a href="72b778e0-dda8-dc91-01be-1675c67bbb97.htm">NodeShell</a></td><td>
            Base functionality shared by all node implementations.  New node types can be implemented outside of
            this assembly only by deriving from one of the generic node classes.
            </td></tr><tr><td><a href="5e09cdce-341c-c36f-dbdb-3096a0113f90.htm">NodeShell<span id="LST827382C_11" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST827382C_12" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td> </td></tr><tr><td><a href="74ee0c79-3375-3f43-3f76-60e83a1007fd.htm">OutputPort<span id="LST827382C_13" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST827382C_14" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Type-erased implementation of output port.
            </td></tr><tr><td><a href="4dc8eebf-9db8-5e47-e901-ad9beb1cd973.htm">SourceNode<span id="LST827382C_15" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TState, TMessage<span id="LST827382C_16" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Source node has no inputs and generates messages on its only output.
            </td></tr><tr><td><a href="143a9cf1-b78d-a621-ad93-a7df34643757.htm">TransformNode<span id="LST827382C_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TState, TInput<span id="LST827382C_18" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Transform node has at least one input and zero outputs.  It calls <span class="noLink">[!:Process(TInput)]</span>
            method for each received message.  The node exits when all of its predecessors have exited and closes
            all output channels.
            </td></tr><tr><td><a href="d06e85b0-0914-d6f6-7b77-d7baf08ce287.htm">TransformNode<span id="LST827382C_19" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TState, TInput, TOutput0<span id="LST827382C_20" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Transform node with one output.  Arbitrary number of messages can be produced for a single input message.
            </td></tr><tr><td><a href="ee680852-dec8-0091-5e37-c2af53c1ceb4.htm">TransformNode<span id="LST827382C_21" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TState, TInput, TOutput0, TOutput1<span id="LST827382C_22" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Transform node with two outputs.  Arbitrary number of messages can be produced for a single input message.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Interfaces</h2><div id="IDICASection"><table id="interfaceList" class="table is-hoverable"><tr><td><a href="d69bb16a-194c-3cc0-1693-0013000ed7f4.htm">IInputPort</a></td><td> </td></tr><tr><td><a href="6d1fc5ab-a6ba-19a3-dd6e-67a59b104a37.htm">INodeEventSource</a></td><td>
            This interface allows components that run as a part of a node to publish events.
            </td></tr></table></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Classes</a></li><li><a class="quickLink">Interfaces</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p><a href="(c) 2024-2025 Stian Z. Vrba" target="_blank" rel="noopener noreferrer">(c) 2024-2025 Stian Z. Vrba</a></p> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
});</script></body></html>